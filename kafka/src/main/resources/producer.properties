#如果请求失败，则生产者可以自动重试，重试指定为0，因此不会。
# 启用重试也会打开重复的可能性
retries=0
bootstrap.servers=localhost:9092
#消息延迟发送的毫秒数，目的是为了等待多个消息，在同一批次发送，减少网络请求。
linger.ms=1
# acks=0：如果设置为0，生产者不会等待kafka的响应。
# 消息会被立刻加到发送缓冲通道中，并且认为已经发送成功。
# 这种情况下，不能保证kafka接收到了这条消息，retries配置不会生效，
# 每条消息的偏移量都是1；
# acks=1：这个配置意味着kafka会把这条消息写到本地日志文件中，
# 但是不会等待集群中其他机器的成功响应。
# 这种情况下，在写入日志成功后，集群主机器挂掉，同时从机器还没来得及写的话，消
# 息就会丢失掉。acks=all：这个配置意味着leader会等待所有的follower同步完成。
# 这个确保消息不会丢失，除非kafka集群中所有机器挂掉。这是最强的可用性保证。
acks=1
#生产者等待发送到kafka的消息队列占用内容的大小。
buffer.memory=33554432
#当多条消息需要发送到同一个分区时，生产者会尝试合并网络请求。
# 这会提高client和生产者的效率。如果消息体大于这个配置，生产者不会尝试发送消息。
# 发送给kafka的消息包含不同的批次，每批发送给一个分区。批次大小太小的话可能会降低吞吐量。
# 如果设为0，会禁用批处理功能。
# 如果批次设置很大，可能会有些浪费内存，因为我们会预留这部分内存用于额外的消息。
batch.size=16384
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer